# -*- coding: utf-8 -*-
"""OpenImageLab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18e3qJV4S2u9jV-KDjyy3551qaqRizqC1
"""

import cv2
import numpy as np
import torch
from torchvision import transforms
from PIL import Image
from PyQt5.QtWidgets import QApplication, QLabel, QMainWindow, QVBoxLayout, QPushButton, QFileDialog, QWidget
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import Qt
import sys

class PhotoshopLite(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Photoshop Lite")
        self.setGeometry(100, 100, 800, 600)
        self.image = None

        # UI 구성
        self.init_ui()

    def init_ui(self):
        # 중앙 위젯 설정
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout()

        # 이미지 표시 라벨
        self.image_label = QLabel("이미지를 불러오세요")
        self.image_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.image_label)

        # 버튼들
        open_button = QPushButton("이미지 열기")
        open_button.clicked.connect(self.open_image)
        layout.addWidget(open_button)

        resize_button = QPushButton("크기 조정 (500x500)")
        resize_button.clicked.connect(self.resize_image)
        layout.addWidget(resize_button)

        blur_button = QPushButton("흐림 효과")
        blur_button.clicked.connect(self.apply_blur)
        layout.addWidget(blur_button)

        edge_button = QPushButton("엣지 검출")
        edge_button.clicked.connect(self.detect_edges)
        layout.addWidget(edge_button)

        background_remove_button = QPushButton("배경 제거")
        background_remove_button.clicked.connect(self.remove_background)
        layout.addWidget(background_remove_button)

        save_button = QPushButton("이미지 저장")
        save_button.clicked.connect(self.save_image)
        layout.addWidget(save_button)

        central_widget.setLayout(layout)

    def open_image(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "이미지 열기", "", "Images (*.png *.jpg *.jpeg *.bmp)")
        if file_path:
            self.image = cv2.imread(file_path)
            self.display_image()

    def resize_image(self):
        if self.image is not None:
            self.image = cv2.resize(self.image, (500, 500))
            self.display_image()

    def apply_blur(self):
        if self.image is not None:
            self.image = cv2.GaussianBlur(self.image, (15, 15), 0)
            self.display_image()

    def detect_edges(self):
        if self.image is not None:
            gray = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
            edges = cv2.Canny(gray, 100, 200)
            self.image = cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)
            self.display_image()

    def remove_background(self):
        if self.image is not None:
            # 배경 제거 모델 로드
            model = torch.hub.load('pytorch/vision:v0.10.0', 'deeplabv3_resnet101', pretrained=True)
            model.eval()

            # PIL 변환
            image_pil = Image.fromarray(cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB))
            preprocess = transforms.Compose([
                transforms.ToTensor(),
                transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
            ])
            input_tensor = preprocess(image_pil).unsqueeze(0)

            with torch.no_grad():
                output = model(input_tensor)['out'][0]
            mask = output.argmax(0).byte().cpu().numpy()

            # 배경 제거
            mask = cv2.resize(mask, (self.image.shape[1], self.image.shape[0]))
            self.image[mask == 0] = [255, 255, 255]
            self.display_image()

    def save_image(self):
        if self.image is not None:
            file_path, _ = QFileDialog.getSaveFileName(self, "이미지 저장", "", "Images (*.png *.jpg *.bmp)")
            if file_path:
                cv2.imwrite(file_path, self.image)

    def display_image(self):
        """이미지를 QLabel에 표시"""
        qformat = QPixmap.Format_RGB888
        if len(self.image.shape) == 2:  # Grayscale
            qformat = QPixmap.Format_Grayscale8
        elif len(self.image.shape) == 3 and self.image.shape[2] == 4:  # RGBA
            qformat = QPixmap.Format_RGBA8888

        h, w, ch = self.image.shape
        bytes_per_line = ch * w
        converted_img = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)
        qimage = QPixmap.fromImage(
            QPixmap(QImage(converted_img.data, w, h, bytes_per_line, qformat))
        )
        self.image_label.setPixmap(qimage.scaled(700, 500, Qt.KeepAspectRatio))

# PyQt5 애플리케이션 실행
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = PhotoshopLite()
    window.show()
    sys.exit(app.exec_())